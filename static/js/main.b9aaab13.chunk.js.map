{"version":3,"sources":["getusermedia.js","components/buttons/arrowButton.tsx","components/buttons/recordButton.tsx","components/buttons/stopButton.tsx","components/layout/buttonBar.tsx","components/layout/paddedBar.tsx","components/layout/screenWrapper.tsx","components/layout/titleBar.tsx","components/screens/baseScreen.tsx","components/visualizer.tsx","components/clipInfo.tsx","components/trackList.tsx","components/recorder.tsx","components/screens/startScreen.tsx","components/screens/listenScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["promisifiedOldGUM","constraints","successCallback","errorCallback","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Promise","call","reject","Error","polyfillGUM","undefined","mediaDevices","ArrowButton","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","onClick","title","direction","disabled","_this$props$size","size","height","width","color","unclickable","react_default","a","createElement","style","backgroundColor","borderTop","borderBottom","borderLeft","borderRight","cursor","PureComponent","RecordButton","borderRadius","border","StopButton","ButtonBar","_Component","flex","display","flexDirection","textAlign","justifyContent","alignItems","padding","children","Component","PaddedBar","objectSpread","ScreenWrapper","MsUserSelect","MozUserSelect","userSelect","position","top","bottom","left","right","TitleBar","_this","screen","icon","paddingBottom","marginBottom","fontSize","renderIcon","margin","marginLeft","onScreenChange","recordButton_RecordButton","BaseScreen","screenWrapper_ScreenWrapper","titleBar_TitleBar","Visualizer","_getPrototypeOf2","_len","length","args","Array","_key","concat","clipCanvas","canvasCtx","getContext","WIDTH","HEIGHT","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","waveform","x","beginPath","moveTo","i","y","lineTo","stroke","_this2","ref","c","setState","ClipInfo","Audio","download","clipInfo","link","document","href","audioUrl","sessionName","trackName","body","appendChild","click","removeChild","showAudio","onDelete","onAudioPlayed","audioRef","trackNumber","maxWidth","minWidth","visualizer_Visualizer","audio","onPlay","controls","marginTop","src","TrackList","audioElements","exceptClip","forEach","pause","clips","onClipPlayed","overflow","map","clip","clipInfo_ClipInfo","_onDelete","toString","stopAllClips","Recorder","mediaRecorder","analyser","dataBuffer","maxSilence","minSaveLength","lastClip","saveMode","lastNoiseCounter","chunks","trackCount","stream","saveClip","toConsumableArray","state","record","start","status","split","stop","then","initializeAudioStream","canvas","querySelector","draw","setTimeout","readAnalyserData","console","log","catch","err","alert","getTracks","track","audioContext","AudioContext","audioSource","createMediaStreamSource","createAnalyser","connect","bufferLength","fftSize","Uint8Array","MediaRecorder","mimeType","audioBitsPerSecond","onstart","e","ondataavailable","push","data","onstop","blob","Blob","type","window","URL","createObjectURL","getByteTimeDomainData","min","max","Math","slice","autoStartStop","_this3","stopButton_StopButton","_this4","_this$state","baseScreen_BaseScreen","trackList_TrackList","splice","paddedBar_PaddedBar","className","buttonBar_ButtonBar","arrowButton_ArrowButton","renderMainButton","StartScreen","placeholder","onChange","onSessionNameChange","target","ListenScreen","App","setScreen","currentScreen","recorder_Recorder","listenScreen_ListenScreen","startScreen_StartScreen","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9aaab13.chunk.js","sourcesContent":["export var promisifiedOldGUM = function (constraints, successCallback, errorCallback) {\r\n    // First get ahold of getUserMedia, if present\r\n    var getUserMedia = (navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia ||\r\n        navigator.msGetUserMedia);\r\n\r\n    // Some browsers just don't implement it - return a rejected promise with an error\r\n    // to keep a consistent interface\r\n    if (!getUserMedia) {\r\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n    }\r\n\r\n    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n    return new Promise(function (successCallback, errorCallback) {\r\n        getUserMedia.call(navigator, constraints, successCallback, errorCallback);\r\n    });\r\n\r\n}\r\n\r\nexport var polyfillGUM = function () {\r\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\r\n    if (navigator.mediaDevices === undefined) {\r\n        navigator.mediaDevices = {};\r\n    }\r\n\r\n    // Some browsers partially implement mediaDevices. We can't just assign an object\r\n    // with getUserMedia as it would overwrite existing properties.\r\n    // Here, we will just add the getUserMedia property if it's missing.\r\n    if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n    }\r\n}","import React, { Component, PureComponent } from 'react';\r\nimport { IButtonProps } from './buttonProps';\r\n\r\nexport interface IArrowButtonProps extends IButtonProps {\r\n    direction: \"left\" | \"right\";\r\n}\r\n\r\nexport class ArrowButton extends PureComponent<IArrowButtonProps> {\r\n    render() {\r\n        const { onClick, title, direction, disabled, size = \"75px\" } = this.props;\r\n        const height = \"calc(.5 * \" + size + \")\";\r\n        const width = \"calc(.8 *\" + size + \")\";\r\n        const color = disabled ? \"rgb(50,50,50)\" : \"rgb(125,125,125)\";\r\n        const unclickable = disabled || !onClick;\r\n        return <button\r\n            disabled={unclickable}\r\n            onClick={onClick}\r\n            title={title}\r\n            style={{\r\n                height: 0,\r\n                width: 0,\r\n                backgroundColor: \"transparent\",\r\n                borderTop: height + \" solid transparent\",\r\n                borderBottom: height + \" solid transparent\",\r\n                borderLeft: direction == \"right\" ? width + \" solid \" + color : \"none\",\r\n                borderRight: direction == \"left\" ? width + \" solid \" + color : \"none\",\r\n                cursor: unclickable ? undefined : \"pointer\"\r\n            }}\r\n        />\r\n    }\r\n}","import React, { Component, PureComponent } from 'react';\r\nimport { IButtonProps } from './buttonProps';\r\n\r\nexport interface IRecordButtonProps extends IButtonProps {\r\n}\r\n\r\nexport class RecordButton extends PureComponent<IRecordButtonProps> {\r\n    render() {\r\n        const { onClick, title, disabled, size = \"75px\" } = this.props;\r\n        const color = disabled ? \"rgb(125,0,0)\" : \"rgb(225,0,0)\";\r\n        const unclickable = disabled || !onClick;\r\n        return <button\r\n            onClick={onClick}\r\n            title={title}\r\n            disabled={unclickable}\r\n            style={{\r\n                height: size,\r\n                width: size,\r\n                borderRadius: size,\r\n                backgroundColor: color,\r\n                border: \"none\",\r\n                cursor: unclickable ? undefined : \"pointer\",\r\n            }}\r\n        />\r\n    }\r\n}","import React, { Component, PureComponent } from 'react';\r\nimport { IButtonProps } from './buttonProps';\r\n\r\nexport interface IStopButtonProps  extends IButtonProps{\r\n}\r\n\r\nexport class StopButton extends PureComponent<IStopButtonProps> {\r\n    render() {\r\n        const size = this.props.size || \"75px\";\r\n        return <button\r\n            onClick={this.props.onClick}\r\n            title={this.props.title}\r\n            style={{\r\n                height: size,\r\n                width: size,\r\n                backgroundColor: \"rgb(125,125,125)\",\r\n                border: \"none\",\r\n                cursor: \"pointer\"\r\n            }}\r\n        />\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class ButtonBar extends Component<{ direction?: \"row\" | \"column\" }> {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    flex: \"none\",\r\n                    display: \"flex\",\r\n                    flexDirection: (this.props.direction || \"row\"),\r\n                    textAlign: \"center\",\r\n                    justifyContent: \"space-around\",\r\n                    alignItems: \"center\",\r\n                    padding: \"5px\"\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class PaddedBar extends Component<{style?: React.CSSProperties}> {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{ \r\n                    padding: \"10% 15px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    ...this.props.style\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class ScreenWrapper extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    MsUserSelect: \"none\",\r\n                    MozUserSelect: \"none\",\r\n                    userSelect: \"none\",\r\n                    position: \"absolute\",\r\n                    top: \"2.5%\",\r\n                    bottom: \"5%\",\r\n                    left: \"5%\",\r\n                    right: \"5%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"flex-end\",\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { CurrentScreen } from '../screens/baseScreen';\r\nimport { RecordButton } from '../buttons/recordButton';\r\n\r\nexport type Icon = \"recording\" | \"armed\";\r\n\r\nexport interface ITitleBarProps {\r\n    icon?: Icon,\r\n    title?: string,\r\n    screen: CurrentScreen,\r\n    onScreenChange: (newScreen: CurrentScreen) => void\r\n};\r\n\r\nexport class TitleBar extends Component<ITitleBarProps> {\r\n    public static renderIcon(icon?: Icon): React.ReactNode {\r\n        const size = \"20px\";\r\n        switch (icon) {\r\n            case \"recording\":\r\n                return <RecordButton size={size} />\r\n            default:\r\n                return <RecordButton size={size} disabled={true} />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title, screen, icon } = this.props;\r\n        return (\r\n            <div\r\n                style={{\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    paddingBottom: \"5%\",\r\n                    marginBottom: \"auto\",\r\n                    display: \"flex\",\r\n                    fontSize: \"125%\",\r\n                }}>\r\n                {TitleBar.renderIcon(icon)}\r\n                <span style={{ margin: \"0 10px\" }}>{title}</span>\r\n                {(screen == \"record\" || screen == \"start\") && <button style={{ marginLeft: \"auto\" }} onClick={() => { this.props.onScreenChange(\"listen\") }}>Listen</button>}\r\n                {screen == \"listen\" && <button style={{ marginLeft: \"auto\" }} onClick={() => { this.props.onScreenChange(\"record\") }}>Record</button>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { RecordButton } from '../buttons/recordButton';\r\nimport { ButtonBar } from '../layout/buttonBar';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar, ITitleBarProps } from '../layout/titleBar';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\n\r\nexport type CurrentScreen = \"start\" | \"record\" | \"listen\";\r\n\r\nexport interface IScreenProps extends ITitleBarProps {\r\n}\r\n\r\nexport class BaseScreen extends Component<IScreenProps> {\r\n    render() {\r\n        return (\r\n            <ScreenWrapper>\r\n                <TitleBar {...this.props} />\r\n                {this.props.children}\r\n            </ScreenWrapper>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport interface IVisualizerProps {\r\n    waveform: number[];\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport interface IVisualizerState {\r\n    clipCanvas?: HTMLCanvasElement;\r\n}\r\n\r\nexport class Visualizer extends Component<IVisualizerProps, IVisualizerState> {\r\n    clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    componentDidUpdate() {\r\n        if (!this.clipCanvas) { return; }\r\n        var canvasCtx = this.clipCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        var WIDTH = this.clipCanvas.width\r\n        var HEIGHT = this.clipCanvas.height;\r\n\r\n        canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        canvasCtx.lineWidth = 2;\r\n        canvasCtx.strokeStyle = 'rgb(125, 125, 125)';\r\n\r\n        var sliceWidth = WIDTH * 1.0 / this.props.waveform.length;\r\n        var x = 0;\r\n        canvasCtx.beginPath();\r\n        canvasCtx.moveTo(0, HEIGHT / 2);\r\n\r\n        for (var i = 0; i < this.props.waveform.length; i++) {\r\n            var v = this.props.waveform[i] / 128.0;\r\n            var y = v * HEIGHT / 2;\r\n            canvasCtx.lineTo(x, y);\r\n            x += sliceWidth;\r\n        }\r\n\r\n        canvasCtx.stroke();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                height=\"100\"\r\n                width=\"1000\"\r\n                style={{\r\n                    flex: \"auto\",\r\n                    ...this.props.style\r\n                }}\r\n                ref={c => {\r\n                    if (!this.clipCanvas && c) {\r\n                        this.clipCanvas = c;\r\n                        this.setState({ clipCanvas: c });\r\n                    }\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Visualizer } from './visualizer';\r\n\r\nexport interface IClipInfo {\r\n    sessionName: string;\r\n    audioUrl: string;\r\n    trackName: string;\r\n\r\n    //todo: add other information like length, date and wave preview\r\n    waveform: number[];\r\n    trackNumber: number;\r\n}\r\n\r\nexport interface IClipInfoProps {\r\n    clipInfo: IClipInfo;\r\n    onDelete: () => void;\r\n    showAudio?: boolean;\r\n    onAudioPlayed?: () => void;\r\n    audioRef?: (audio: HTMLAudioElement) => void;\r\n}\r\n\r\nexport class ClipInfo extends Component<IClipInfoProps> {\r\n    public Audio: HTMLAudioElement | null = null;\r\n    private clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    private download = () => {\r\n        const { clipInfo } = this.props;\r\n        var link = document.createElement(\"a\"); // Or maybe get it from the current document\r\n        link.href = clipInfo.audioUrl;\r\n        link.download = (clipInfo.sessionName ? clipInfo.sessionName + \"_\" : \"\") + clipInfo.trackName + \".webm\";\r\n        document.body.appendChild(link);\r\n        this.download && link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    render() {\r\n        const { clipInfo, showAudio, onDelete, onAudioPlayed, audioRef } = this.props;\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", height: \"100px\", margin: \"5px\" }}>\r\n                <div style={{ flex: \"none\", display: \"flex\", alignItems: \"center\", margin: \"5px\" }}>{clipInfo.trackNumber}</div>\r\n                <div style={{ flex: \"auto\", display: \"flex\", flexDirection: \"column\", maxWidth: \"80%\", minWidth: \"50%\" }}>\r\n                    <Visualizer waveform={clipInfo.waveform} style={{height: \"50px\"}}/>\r\n                    {showAudio &&\r\n                        <audio\r\n                            ref={audio => {\r\n                                if (audio && audioRef) { audioRef(audio); }\r\n                                this.Audio = this.Audio || audio;\r\n                            }}\r\n                            onPlay={onAudioPlayed}\r\n                            controls\r\n                            style={{\r\n                                width: \"100%\",\r\n                                height: \"40px\",\r\n                                marginTop: \"10px\"\r\n                            }}\r\n                            src={clipInfo.audioUrl}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div style={{ margin: \"5px\", justifyContent: \"space-around\", flex: \"none\", display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        {clipInfo.trackName}\r\n                    </div>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        <button onClick={onDelete}>Delete</button>\r\n                    </div>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        <button onClick={this.download}>Download</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { IClipInfo, ClipInfo } from './clipInfo';\r\n\r\nexport class TrackList extends Component<{ clips: IClipInfo[], onClipPlayed?: () => void, onDelete: (index: number) => void }> {\r\n    private audioElements: HTMLAudioElement[] = [];\r\n    public stopAllClips(exceptClip?: number) {\r\n        this.audioElements.forEach((a, i) => {\r\n            if (exceptClip != i) {\r\n                a.pause();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { clips, onClipPlayed, onDelete } = this.props;\r\n        return (\r\n            <div style={{ overflow: \"auto\", flex: \"auto\", padding: \"5px\" }}>\r\n                {clips.map((clip, i) => {\r\n                    return <ClipInfo\r\n                        showAudio\r\n                        audioRef={a => { if (a) { this.audioElements[i] = a; } }}\r\n                        key={i}\r\n                        clipInfo={clip}\r\n                        onDelete={() => { onDelete(i); }}\r\n                        onAudioPlayed={() => {\r\n                            // stop other audio clips\r\n                            this.stopAllClips(i);\r\n\r\n                            // stop recording (handled in parent)\r\n                            onClipPlayed && onClipPlayed();\r\n                        }}\r\n                    />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}","import { polyfillGUM } from \"../getusermedia\";\r\nimport React, { Component } from 'react';\r\nimport { ClipInfo, IClipInfo } from \"./clipInfo\";\r\nimport { TitleBar } from \"./layout/titleBar\";\r\nimport { ScreenWrapper } from \"./layout/screenWrapper\";\r\nimport { ArrowButton } from \"./buttons/arrowButton\";\r\nimport { RecordButton } from \"./buttons/recordButton\";\r\nimport { StopButton } from \"./buttons/stopButton\";\r\nimport { ButtonBar } from \"./layout/buttonBar\";\r\nimport { PaddedBar } from \"./layout/paddedBar\";\r\nimport { IScreenProps, BaseScreen } from \"./screens/baseScreen\";\r\nimport { TrackList } from \"./trackList\";\r\n\r\nexport interface IRecorderProps extends IScreenProps {\r\n}\r\n\r\nexport interface IRecorderState {\r\n    lastClip?: IClipInfo;\r\n    clips: IClipInfo[];\r\n    status: \"initializing\" | \"ready\" | \"armed\" | \"recording\" | \"done\" | \"paused\" | \"error\"; // it looks like mediarecorder is reusable after stopping.\r\n    recording?: \"waiting for audio\" | \"detected sound recently\" | \"recording a track\";\r\n}\r\n\r\nexport class Recorder extends Component<IRecorderProps, IRecorderState> {\r\n    private mediaRecorder?: MediaRecorder;\r\n    private analyser?: AnalyserNode;\r\n    private dataBuffer?: Uint8Array;\r\n\r\n    private readonly maxSilence = 100;\r\n    private readonly minSaveLength = 1000;\r\n    private lastClip?: IClipInfo;\r\n    private saveMode: \"saveNext\" | \"autodecide\" | \"skipNext\" = \"autodecide\";\r\n    private lastNoiseCounter = 0;\r\n\r\n    // currently recording chunks\r\n    private chunks: Blob[] = [];\r\n\r\n    // currently recording chunks\r\n    private waveform: number[] = [];\r\n\r\n    private trackCount = 1;\r\n\r\n    stream?: MediaStream;\r\n\r\n    constructor(props: IRecorderProps) {\r\n        super(props);\r\n        polyfillGUM();\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(stream => {\r\n                    this.initializeAudioStream(stream);\r\n\r\n                    const canvas = document.querySelector('.visualizer') as HTMLCanvasElement;\r\n                    const canvasCtx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n                    canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n                    canvasCtx.lineWidth = 2;\r\n\r\n                    // TODO: move this to a method\r\n                    const draw = () => {\r\n                        setTimeout(draw, 1000/60);\r\n                        //requestAnimationFrame(draw);\r\n\r\n                        // how do we update this data while not recording?\r\n                        // but also not do duplicates here?\r\n                        this.readAnalyserData();\r\n\r\n                        const WIDTH = canvas.width\r\n                        const HEIGHT = canvas.height;\r\n                        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n                        if (this.state.status == \"recording\") {\r\n                            canvasCtx.strokeStyle = 'rgb(225, 0, 0)';\r\n                        }\r\n                        else {\r\n                            canvasCtx.strokeStyle = 'rgb(75, 75, 75)';\r\n                        }\r\n\r\n                        const sliceWidth = WIDTH * 1.0 / this.waveform.length;\r\n                        let x = 0;\r\n\r\n                        canvasCtx.beginPath();\r\n                        canvasCtx.moveTo(0, HEIGHT / 2);\r\n                        for (let i = 0; i < this.waveform.length; i++) {\r\n                            const v = this.waveform[i] / 128.0;\r\n                            const y = v * HEIGHT / 2;\r\n                            canvasCtx.lineTo(x, y);\r\n                            x += sliceWidth;\r\n                        }\r\n\r\n                        canvasCtx.lineTo(canvas.width, canvas.height / 2);\r\n                        canvasCtx.stroke();\r\n                    }\r\n\r\n                    draw();\r\n\r\n\r\n                    // actually lets go straight to armed. default is to go to \"ready\"\r\n                    console.log(\"armed and ready!\")\r\n                    this.setState({ status: \"armed\" });\r\n\r\n                }).catch(function (err) {\r\n                    alert('The following getUserMedia error occured: ' + err);\r\n                });\r\n        }\r\n        else {\r\n            alert('getUserMedia not supported on your browser!');\r\n        }\r\n\r\n        this.state = { status: \"initializing\", clips: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.stream) { this.stream.getTracks().forEach(track => track.stop()) }\r\n    }\r\n\r\n    private initializeAudioStream(stream: MediaStream) {\r\n        this.stream = stream;\r\n\r\n        // Set up AnalyserNode for waveform rendering\r\n        var audioContext = new AudioContext();\r\n        var audioSource = audioContext.createMediaStreamSource(stream);\r\n        this.analyser = audioContext.createAnalyser();\r\n        audioSource.connect(this.analyser);\r\n        var bufferLength = this.analyser.fftSize;\r\n        this.dataBuffer = new Uint8Array(bufferLength);\r\n\r\n        // Set up MediaRecorder for recording (obviously)\r\n        this.mediaRecorder = new MediaRecorder(stream, { mimeType: \"audio/webm\", audioBitsPerSecond: 320000 });\r\n        this.mediaRecorder.onstart = e => {\r\n            // reset our waveform and chunks\r\n            this.chunks = [];\r\n            this.waveform = [];\r\n        }\r\n        this.mediaRecorder.ondataavailable = (e) => {\r\n            this.chunks.push(e.data);\r\n\r\n            // here is where we should save the waveform as well\r\n            this.readAnalyserData();\r\n        }\r\n        this.mediaRecorder.onstop = (e) => {\r\n            // probably should reset the waveform..?\r\n            const blob = new Blob(this.chunks, { 'type': 'audio/webm' });\r\n            const audioUrl = window.URL.createObjectURL(blob);\r\n            const clipInfo: IClipInfo = {\r\n                audioUrl,\r\n                waveform: this.waveform,\r\n            } as IClipInfo;\r\n\r\n            this.chunks = [];\r\n            this.waveform = [];\r\n\r\n            // this is where we should decide if we keep it or not...\r\n            // if it is really short DONT keep it.\r\n            this.lastClip = clipInfo;\r\n            this.setState({ lastClip: clipInfo });\r\n            if (this.saveMode == \"autodecide\") {\r\n                console.log(\"waveform length: \" + clipInfo.waveform.length)\r\n                if (clipInfo.waveform.length < this.minSaveLength) {\r\n                    console.log(\"skip saving the track since it is so short\");\r\n                    return;\r\n                }\r\n\r\n                // TODO: also check to see how \"full\" the clip is. \r\n                // If it is like 2 snare hits a long way apart don't keep it.\r\n            }\r\n            if (this.saveMode == \"skipNext\") {\r\n                // only skip one\r\n                this.saveMode = \"autodecide\";\r\n                console.log(\"skip saving because we are in skipNext save mode\");\r\n                return;\r\n            }\r\n            if (this.saveMode == \"saveNext\") {\r\n                // only save one\r\n                this.saveMode = \"autodecide\";\r\n                console.log(\"force saving because we are in saveNext save mode\");\r\n            }\r\n\r\n            this.saveClip(clipInfo);\r\n        }\r\n    }\r\n\r\n    private readAnalyserData() {\r\n        if (!this.analyser || !this.dataBuffer) { throw \"missing analyser node or data buffer!\"; }\r\n        this.analyser.getByteTimeDomainData(this.dataBuffer);\r\n        var min = 100000000000000;\r\n        var max = -100000000000000;\r\n        this.dataBuffer.forEach(value => { min = Math.min(value, min); max = Math.max(value, max); });\r\n        this.waveform = this.waveform.concat([min, max]);\r\n\r\n        // This is really just so the waveform \"scrolls\" when in the armed state.\r\n        if (this.state.status != \"recording\") {\r\n            // there are some... race conditions here depending on when the recording gets stopped.\r\n            // should either fix this or ensure we don't trim VALID recordings\r\n            // it should never be able to get out of this region, but bad things would happen if it did?\r\n            if (this.waveform.length > this.maxSilence\r\n                && this.waveform.length < this.maxSilence + 10) {\r\n                // wowza this is horrible. just making the race condition smaller...\r\n                this.waveform = this.waveform.slice(this.waveform.length - this.maxSilence);\r\n            }\r\n        }\r\n\r\n        // Decide whether to start or stop recording\r\n        this.autoStartStop(min, max);\r\n    }\r\n\r\n    private autoStartStop(min: number, max: number) {\r\n        if (max > 140 || min < 100) {\r\n            this.lastNoiseCounter = 0;\r\n            // if we aren't recording we should start\r\n            if (this.state.status == \"armed\") {\r\n                this.record();\r\n            }\r\n        }\r\n        else {\r\n            this.lastNoiseCounter++;\r\n            if (this.lastNoiseCounter > this.maxSilence) {\r\n                // if we are recording we should stop but stay armed\r\n                if (this.state.status == \"recording\") {\r\n                    this.split();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private saveClip = (clipInfo: IClipInfo) => {\r\n        clipInfo.trackName = \"Track \" + this.trackCount;\r\n        clipInfo.trackNumber = this.trackCount;\r\n        this.trackCount++;\r\n        this.setState({ clips: [...this.state.clips, clipInfo], lastClip: undefined });\r\n        this.lastClip = undefined;\r\n        this.waveform = [];\r\n    }\r\n\r\n    public record = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.start();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n\r\n    /*\r\n    public pause = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.pause();\r\n        this.setState({ status: \"paused\" });\r\n    }\r\n\r\n    public resume = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.resume();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n    */\r\n\r\n    public split = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.stop();\r\n        this.setState({ status: \"armed\" }); // not sure this is right!\r\n    }\r\n\r\n    public stop = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        if (this.mediaRecorder.state == \"recording\" || this.mediaRecorder.state == \"paused\") {\r\n            this.mediaRecorder.stop();\r\n        }\r\n\r\n        this.setState({ status: \"ready\" });\r\n    }\r\n\r\n    private renderMainButton(): React.ReactNode {\r\n        const { status } = this.state;\r\n        switch (status) {\r\n            case \"ready\":\r\n                return <RecordButton\r\n                    onClick={() => { this.setState({ status: \"armed\" }) }}\r\n                    title=\"Arm for recording\"\r\n                />;\r\n            case \"armed\":\r\n            case \"recording\":\r\n                return <StopButton\r\n                    onClick={this.stop}\r\n                    title=\"Stop\"\r\n                />;\r\n            default:\r\n                return <div style={{height: \"75px\", color: \"rgb(50,50,50)\", display:\"flex\", alignItems: \"center\", textAlign: \"center\"}}>{status}</div>;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { status, clips, lastClip } = this.state;\r\n        return (\r\n            <BaseScreen icon={status as any} title={\"Recording \" + (this.props.title || \"\")} screen=\"record\" onScreenChange={this.props.onScreenChange}>\r\n                <TrackList\r\n                    clips={clips}\r\n                    onClipPlayed={this.stop}\r\n                    onDelete={i => {\r\n                        var removed = clips.splice(i, 1);\r\n                        this.setState({ clips: clips.slice() })\r\n                    }}\r\n                />\r\n                <PaddedBar>\r\n                    <canvas className=\"visualizer\" height=\"100\" width=\"1000\" style={{ width: \"100%\", height: \"100px\" }} />\r\n                </PaddedBar>\r\n                <ButtonBar>\r\n\r\n                    <ArrowButton\r\n                        size=\"50px\"\r\n                        direction=\"left\"\r\n                        title=\"Save\"\r\n                        disabled={status != \"recording\" && !lastClip}\r\n                        onClick={() => {\r\n                            if (status == \"recording\") { this.saveMode = \"saveNext\"; this.split() }\r\n                            else if (lastClip) { this.saveClip(lastClip); }\r\n                        }}\r\n                    />\r\n\r\n                    {this.renderMainButton()}\r\n\r\n                    <ArrowButton\r\n                        size=\"50px\"\r\n                        direction=\"right\"\r\n                        title=\"Skip\"\r\n                        disabled={status != \"recording\" && !lastClip}\r\n                        onClick={() => {\r\n                            if (status == \"recording\") { this.saveMode = \"skipNext\"; this.split() }\r\n                            else if (lastClip) { this.setState({ lastClip: undefined }); }\r\n                        }}\r\n                    />\r\n\r\n                </ButtonBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { RecordButton } from '../buttons/recordButton';\r\nimport { ButtonBar } from '../layout/buttonBar';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar } from '../layout/titleBar';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\nimport { BaseScreen, IScreenProps } from './baseScreen';\r\n\r\nexport interface IStartScreenProps extends IScreenProps {\r\n    onSessionNameChange: (name: string) => void;\r\n}\r\n\r\nexport class StartScreen extends Component<IStartScreenProps> {\r\n    render() {\r\n        return (\r\n            <BaseScreen title=\"Session Recorder\" screen={this.props.screen} onScreenChange={this.props.onScreenChange}>\r\n                <PaddedBar style={{ height: \"100px\" }}>\r\n                    <input\r\n                        placeholder=\"Enter a name your session...\"\r\n                        onChange={e => {\r\n                            this.props.onSessionNameChange(e.target.value);\r\n                        }}\r\n                        type=\"textfield\"\r\n                        style={{\r\n                            maxWidth: \"calc(100% - 20px)\",\r\n                            height: \"50px\",\r\n                            flex: \"auto\",\r\n                            fontSize: \"150%\",\r\n                            padding: \"0 10px\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    />\r\n                </PaddedBar>\r\n                <ButtonBar>\r\n                    <RecordButton\r\n                        onClick={() => { this.props.onScreenChange(\"record\") }}\r\n                        title=\"Start a new session\"\r\n                    />\r\n                </ButtonBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar } from '../layout/titleBar';\r\nimport { IScreenProps, BaseScreen } from './baseScreen';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\n\r\nexport interface IListScreenProps extends IScreenProps {\r\n}\r\n\r\nexport class ListenScreen extends Component<IListScreenProps> {\r\n    render() {\r\n        return (\r\n            <BaseScreen title={this.props.title} screen={this.props.screen} onScreenChange={this.props.onScreenChange}>\r\n                <PaddedBar>Listening!</PaddedBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Recorder } from './components/recorder';\nimport { StartScreen } from './components/screens/startScreen';\nimport { ListenScreen } from './components/screens/listenScreen';\nimport { CurrentScreen } from './components/screens/baseScreen';\n\n// App has 3 states. Start, Record and Listen\nexport type Screen = \"start\" | \"record\" | \"listen\";\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n  currentScreen: Screen;\n  sessionName?: string;\n}\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = { currentScreen: \"start\" };\n  }\n\n  private setScreen = (currentScreen: CurrentScreen) => {\n    this.setState({ currentScreen });\n  }\n\n  render() {\n    const { currentScreen } = this.state;\n    switch (currentScreen) {\n      case \"record\":\n        // current functionality is in <Recorder>\n        return <Recorder\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n          title={this.state.sessionName}\n        />;\n      case \"listen\":\n        return <ListenScreen\n          title={this.state.sessionName}\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n        />\n      case \"start\":\n      default:\n        return <StartScreen\n          title={this.state.sessionName}\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n          onSessionNameChange={sessionName => { this.setState({ sessionName }) }}\n        />\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}