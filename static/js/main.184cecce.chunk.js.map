{"version":3,"sources":["getusermedia.js","visualizer.tsx","clipInfo.tsx","components/buttons/recordButton.tsx","components/buttons/stopButton.tsx","components/layout/buttonBar.tsx","components/layout/paddedBar.tsx","components/layout/screenWrapper.tsx","components/layout/titleBar.tsx","components/screens/baseScreen.tsx","recorder.tsx","components/screens/startScreen.tsx","components/screens/listenScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["promisifiedOldGUM","constraints","successCallback","errorCallback","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Promise","call","reject","Error","polyfillGUM","undefined","mediaDevices","Visualizer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","clipCanvas","inherits","createClass","key","value","canvasCtx","getContext","WIDTH","width","HEIGHT","height","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","props","waveform","x","beginPath","moveTo","i","y","lineTo","stroke","_this2","react_default","a","createElement","ref","c","setState","style","flex","Component","ClipInfo","download","clipInfo","link","document","href","audioUrl","sessionName","trackName","body","appendChild","click","removeChild","_this$props","showAudio","onDelete","display","flexDirection","margin","alignItems","trackNumber","maxWidth","minWidth","visualizer_Visualizer","controls","marginTop","src","justifyContent","onClick","RecordButton","_PureComponent","size","title","borderRadius","backgroundColor","border","cursor","PureComponent","StopButton","ButtonBar","direction","textAlign","padding","children","PaddedBar","ScreenWrapper","position","top","bottom","left","right","TitleBar","screen","marginBottom","fontSize","status","marginLeft","onScreenChange","BaseScreen","screenWrapper_ScreenWrapper","titleBar_TitleBar","Recorder","mediaRecorder","maxSilence","minSaveLength","lastClip","saveMode","lastNoiseCounter","chunks","trackCount","stream","saveClip","clips","toConsumableArray","state","record","start","pause","resume","split","stop","console","log","audio","then","audioContext","AudioContext","audioSource","createMediaStreamSource","analyser","createAnalyser","connect","bufferLength","fftSize","dataArray","Uint8Array","canvas","querySelector","draw","requestAnimationFrame","getByteTimeDomainData","min","max","forEach","v","Math","slice","lastX","lastY","MediaRecorder","mimeType","audioBitsPerSecond","onstart","e","ondataavailable","push","data","onstop","blob","Blob","type","window","URL","createObjectURL","catch","err","error","_this$state","baseScreen_BaseScreen","overflow","map","clip","clipInfo_ClipInfo","splice","paddedBar_PaddedBar","className","buttonBar_ButtonBar","recordButton_RecordButton","stopButton_StopButton","StartScreen","onChange","onSessionNameChange","target","ListenScreen","App","setScreen","currentScreen","recorder_Recorder","listenScreen_ListenScreen","startScreen_StartScreen","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.184cecce.chunk.js","sourcesContent":["export var promisifiedOldGUM = function (constraints, successCallback, errorCallback) {\r\n    // First get ahold of getUserMedia, if present\r\n    var getUserMedia = (navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia ||\r\n        navigator.msGetUserMedia);\r\n\r\n    // Some browsers just don't implement it - return a rejected promise with an error\r\n    // to keep a consistent interface\r\n    if (!getUserMedia) {\r\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n    }\r\n\r\n    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n    return new Promise(function (successCallback, errorCallback) {\r\n        getUserMedia.call(navigator, constraints, successCallback, errorCallback);\r\n    });\r\n\r\n}\r\n\r\nexport var polyfillGUM = function () {\r\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\r\n    if (navigator.mediaDevices === undefined) {\r\n        navigator.mediaDevices = {};\r\n    }\r\n\r\n    // Some browsers partially implement mediaDevices. We can't just assign an object\r\n    // with getUserMedia as it would overwrite existing properties.\r\n    // Here, we will just add the getUserMedia property if it's missing.\r\n    if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport interface IVisualizerProps {\r\n    waveform: number[];\r\n}\r\n\r\nexport interface IVisualizerState {\r\n    clipCanvas?: HTMLCanvasElement;\r\n}\r\n\r\nexport class Visualizer extends Component<IVisualizerProps, IVisualizerState> {\r\n    clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    componentDidUpdate() {\r\n        if (!this.clipCanvas) { return; }\r\n        var canvasCtx = this.clipCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        var WIDTH = this.clipCanvas.width\r\n        var HEIGHT = this.clipCanvas.height;\r\n\r\n        canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        canvasCtx.lineWidth = 2;\r\n        canvasCtx.strokeStyle = 'rgb(125, 125, 125)';\r\n\r\n        var sliceWidth = WIDTH * 1.0 / this.props.waveform.length;\r\n        var x = 0;\r\n        canvasCtx.beginPath();\r\n        canvasCtx.moveTo(0, HEIGHT / 2);\r\n\r\n        for (var i = 0; i < this.props.waveform.length; i++) {\r\n            var v = this.props.waveform[i] / 128.0;\r\n            var y = v * HEIGHT / 2;\r\n            canvasCtx.lineTo(x, y);\r\n            x += sliceWidth;\r\n        }\r\n\r\n        canvasCtx.stroke();\r\n    }\r\n\r\n    render() {\r\n        return <canvas height=\"100\" width=\"1000\" ref={c => { if(!this.clipCanvas && c){\r\n            this.clipCanvas = c;\r\n            this.setState({clipCanvas: c});\r\n        } }} style={{ flex: \"auto\" }} />;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Visualizer } from './visualizer';\r\n\r\nexport interface IClipInfo {\r\n    sessionName: string;\r\n    audioUrl: string;\r\n    trackName: string;\r\n\r\n    //todo: add other information like length, date and wave preview\r\n    waveform: number[];\r\n    trackNumber: number;\r\n}\r\n\r\nexport interface IClipInfoProps {\r\n    clipInfo: IClipInfo;\r\n    onDelete: () => void;\r\n    showAudio?: boolean;\r\n}\r\n\r\nexport class ClipInfo extends Component<IClipInfoProps> {\r\n    clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    private download = () => {\r\n        const { clipInfo } = this.props;        \r\n        var link = document.createElement(\"a\"); // Or maybe get it from the current document\r\n        link.href = clipInfo.audioUrl;\r\n        link.download = (clipInfo.sessionName ? clipInfo.sessionName + \"_\" : \"\") + clipInfo.trackName + \".webm\";\r\n        document.body.appendChild(link);\r\n        this.download && link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    render() {\r\n        const { clipInfo, showAudio, onDelete } = this.props;\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", height: \"100px\", margin: \"5px\" }}>\r\n                <div style={{ flex: \"none\", display: \"flex\", alignItems: \"center\", margin: \"5px\" }}>{clipInfo.trackNumber}</div>\r\n                <div style={{ flex: \"auto\", display: \"flex\", flexDirection: \"column\", maxWidth:\"80%\", minWidth: \"50%\" }}>\r\n                    <Visualizer waveform={clipInfo.waveform} />\r\n                    {showAudio && <audio controls style={{width: \"100%\", height: \"40px\", marginTop:\"10px\"}} src={clipInfo.audioUrl} />}\r\n                </div>\r\n                <div style={{ margin:\"5px\", justifyContent:\"space-around\", flex: \"none\", display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        {clipInfo.trackName}\r\n                    </div>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        <button onClick={onDelete}>Delete</button>\r\n                    </div>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        <button onClick={this.download}>Download</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, PureComponent } from 'react';\r\n\r\nexport interface IRecordButtonProps {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: string;\r\n}\r\n\r\nexport class RecordButton extends PureComponent<IRecordButtonProps> {\r\n    render() {\r\n        const size = this.props.size || \"75px\";\r\n        return <button\r\n            onClick={this.props.onClick}\r\n            title={this.props.title}\r\n            style={{\r\n                height: size,\r\n                width: size,\r\n                borderRadius: size,\r\n                backgroundColor: \"rgb(225,0,0)\",\r\n                border: \"none\",\r\n                cursor: \"pointer\"\r\n            }}\r\n        />\r\n    }\r\n}","import React, { Component, PureComponent } from 'react';\r\n\r\nexport interface IStopButtonProps {\r\n    onClick: () => void;\r\n    title: string;\r\n    size?: string;\r\n}\r\n\r\nexport class StopButton extends PureComponent<IStopButtonProps> {\r\n    render() {\r\n        const size = this.props.size || \"75px\";\r\n        return <button\r\n            onClick={this.props.onClick}\r\n            title={this.props.title}\r\n            style={{\r\n                height: size,\r\n                width: size,\r\n                backgroundColor: \"rgb(125,125,125)\",\r\n                border: \"none\",\r\n                cursor: \"pointer\"\r\n            }}\r\n        />\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class ButtonBar extends Component<{ direction?: \"row\" | \"column\" }> {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    flex: \"none\",\r\n                    display: \"flex\",\r\n                    flexDirection: (this.props.direction || \"row\"),\r\n                    textAlign: \"center\",\r\n                    justifyContent: \"space-around\",\r\n                    alignItems: \"center\",\r\n                    padding: \"5px\"\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class PaddedBar extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{ \r\n                    padding: \"10% 15px\",\r\n                    display: \"flex\" \r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class ScreenWrapper extends Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    top: \"5%\",\r\n                    bottom: \"5%\",\r\n                    left: \"5%\",\r\n                    right: \"5%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"flex-end\",\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { CurrentScreen } from '../screens/baseScreen';\r\n\r\nexport interface ITitleBarProps {\r\n    title?: string,\r\n    screen: CurrentScreen,\r\n    onScreenChange: (newScreen: CurrentScreen) => void\r\n};\r\n\r\nexport class TitleBar extends Component<ITitleBarProps> {\r\n    render() {\r\n        const { title, screen } = this.props;\r\n        return (\r\n            <div\r\n                style={{\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    marginBottom: \"auto\",\r\n                    display: \"flex\",\r\n                    fontSize: \"125%\"\r\n                }}>\r\n                {(status == \"recording\" || status == \"armed\") && \"Recording\"}\r\n                {title}\r\n                {(screen == \"record\" || screen ==\"start\") && <button style={{ marginLeft: \"auto\" }} onClick={() => { this.props.onScreenChange(\"listen\") }}>Listen</button>}\r\n                {screen == \"listen\" && <button style={{ marginLeft: \"auto\" }} onClick={() => { this.props.onScreenChange(\"record\") }}>Record</button>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { RecordButton } from '../buttons/recordButton';\r\nimport { ButtonBar } from '../layout/buttonBar';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar, ITitleBarProps } from '../layout/titleBar';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\n\r\nexport type CurrentScreen = \"start\" | \"record\" | \"listen\";\r\n\r\nexport interface IScreenProps extends ITitleBarProps {\r\n}\r\n\r\nexport class BaseScreen extends Component<IScreenProps> {\r\n    render() {\r\n        return (\r\n            <ScreenWrapper>\r\n                <TitleBar title={this.props.title} screen={this.props.screen} onScreenChange={this.props.onScreenChange} />\r\n                {this.props.children}\r\n            </ScreenWrapper>\r\n        );\r\n    }\r\n}","import { polyfillGUM } from \"./getusermedia\";\r\nimport React, { Component } from 'react';\r\nimport { ClipInfo, IClipInfo } from \"./clipInfo\";\r\nimport { TitleBar } from \"./components/layout/titleBar\";\r\nimport { ScreenWrapper } from \"./components/layout/screenWrapper\";\r\nimport { RecordButton } from \"./components/buttons/recordButton\";\r\nimport { StopButton } from \"./components/buttons/stopButton\";\r\nimport { ButtonBar } from \"./components/layout/buttonBar\";\r\nimport { PaddedBar } from \"./components/layout/paddedBar\";\r\nimport { IScreenProps, BaseScreen } from \"./components/screens/baseScreen\";\r\n\r\nexport interface IRecorderProps extends IScreenProps {\r\n}\r\n\r\nexport interface IRecorderState {\r\n    lastClip?: IClipInfo;\r\n    clips: IClipInfo[];\r\n    status: \"initializing\" | \"ready\" | \"armed\" | \"recording\" | \"done\" | \"paused\" | \"error\"; // it looks like mediarecorder is reusable after stopping.\r\n    recording?: \"waiting for audio\" | \"detected sound recently\" | \"recording a track\";\r\n}\r\n\r\nexport class Recorder extends Component<IRecorderProps, IRecorderState> {\r\n    private mediaRecorder?: MediaRecorder;\r\n\r\n    private readonly maxSilence = 100;\r\n    private readonly minSaveLength = 1000;\r\n    private lastClip?: IClipInfo;\r\n    private saveMode: \"saveNext\" | \"autodecide\" | \"skipNext\" = \"autodecide\";\r\n    private lastNoiseCounter = 0;\r\n\r\n    // currently recording chunks\r\n    private chunks: Blob[] = [];\r\n\r\n    // currently recording chunks\r\n    private waveform: number[] = [];\r\n\r\n    private trackCount = 1;\r\n\r\n    stream?: MediaStream;\r\n\r\n    constructor(props: IRecorderProps) {\r\n        super(props);\r\n        polyfillGUM();\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            console.log('getUserMedia supported.');\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(stream => {\r\n                    console.log(\"we got the stream\");\r\n                    this.stream = stream;\r\n                    var audioContext = new AudioContext();\r\n                    var audioSource = audioContext.createMediaStreamSource(stream);\r\n                    var analyser = audioContext.createAnalyser();\r\n                    audioSource.connect(analyser);\r\n                    var bufferLength = analyser.fftSize;\r\n                    console.log(bufferLength);\r\n                    var dataArray = new Uint8Array(bufferLength);\r\n\r\n                    var canvas = document.querySelector('.visualizer') as HTMLCanvasElement;\r\n                    var canvasCtx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n                    // TODO: move this to a method\r\n                    var draw = () => {\r\n                        var WIDTH = canvas.width\r\n                        var HEIGHT = canvas.height;\r\n\r\n                        requestAnimationFrame(draw);\r\n\r\n                        analyser.getByteTimeDomainData(dataArray);\r\n\r\n\r\n                        var min = 100000000000000;\r\n                        var max = -100000000000000;\r\n                        dataArray.forEach(v => { min = Math.min(v, min); max = Math.max(v, max); });\r\n\r\n                        this.waveform = this.waveform.concat([min, max]);\r\n\r\n\r\n                        if (this.state.status != \"recording\") {\r\n                            // there are some... race conditions here depending on when the recording gets stopped.\r\n                            // should either fix this or ensure we don't trim VALID recordings\r\n                            // it should never be able to get out of this region, but bad things would happen if it did?\r\n                            if (this.waveform.length > this.maxSilence && this.waveform.length < this.minSaveLength) {\r\n                                this.waveform = this.waveform.slice(this.waveform.length - this.maxSilence);\r\n                            }\r\n                        }\r\n\r\n                        if (max > 140 || min < 100) {\r\n                            this.lastNoiseCounter = 0;\r\n                            // if we aren't recording we should start!\r\n                            if (this.state.status == \"armed\") {\r\n                                this.record();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.lastNoiseCounter++;\r\n                            if (this.lastNoiseCounter > this.maxSilence) {\r\n                                // if we are recording we should stop by stay armed.\r\n                                if (this.state.status == \"recording\") {\r\n                                    this.split();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n                        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n                        canvasCtx.lineWidth = 2;\r\n\r\n                        if (this.state.status == \"recording\") {\r\n                            canvasCtx.strokeStyle = 'rgb(225, 0, 0)';\r\n                        }\r\n                        else {\r\n                            canvasCtx.strokeStyle = 'rgb(75, 75, 75)';\r\n                        }\r\n\r\n                        var sliceWidth = WIDTH * 1.0 / this.waveform.length;\r\n                        var x = 0;\r\n\r\n                        var lastX = 0;\r\n                        var lastY = HEIGHT / 2;\r\n                        canvasCtx.beginPath();\r\n                        canvasCtx.moveTo(lastX, lastY);\r\n\r\n                        for (var i = 0; i < this.waveform.length; i++) {\r\n                            var v = this.waveform[i] / 128.0;\r\n                            var y = v * HEIGHT / 2;\r\n\r\n                            if (this.waveform[i] > 140 || this.waveform[i] < 100) {\r\n                                //canvasCtx.strokeStyle = 'rgb(255, 0, 0)';\r\n\r\n                            }\r\n                            else {\r\n                                //canvasCtx.strokeStyle = 'rgb(255, 255, 255)';\r\n                            }\r\n\r\n                            //canvasCtx.beginPath();\r\n                            //canvasCtx.moveTo(lastX, lastY);\r\n                            canvasCtx.lineTo(x, y);\r\n                            //canvasCtx.stroke();\r\n\r\n                            lastX = x;\r\n                            lastY = y;\r\n\r\n                            x += sliceWidth;\r\n                        }\r\n\r\n                        canvasCtx.lineTo(canvas.width, canvas.height / 2);\r\n                        canvasCtx.stroke();\r\n\r\n                    }\r\n\r\n                    draw();\r\n\r\n                    this.mediaRecorder = new MediaRecorder(stream, { mimeType: \"audio/webm\", audioBitsPerSecond: 320000 });\r\n                    this.mediaRecorder.onstart = e => {\r\n                        // reset our waveform and chunks\r\n                        this.chunks = [];\r\n                        this.waveform = [];\r\n                    }\r\n                    this.mediaRecorder.ondataavailable = (e) => {\r\n                        this.chunks.push(e.data);\r\n                    }\r\n                    this.mediaRecorder.onstop = (e) => {\r\n                        const blob = new Blob(this.chunks, { 'type': 'audio/webm' });\r\n                        this.chunks = [];\r\n                        const audioUrl = window.URL.createObjectURL(blob);\r\n                        const clipInfo: IClipInfo = {\r\n                            audioUrl,\r\n                            waveform: this.waveform,\r\n                        } as IClipInfo;\r\n\r\n                        // TODO: we should have a way to MANUALLY SAVE and MANUALLY SKIP\r\n                        // eg stop/save or trash can button\r\n\r\n                        // this is where we should decide if we keep it or not...\r\n                        // if it is really short DONT keep it.\r\n\r\n                        this.lastClip = clipInfo;\r\n                        this.setState({ lastClip: clipInfo });\r\n                        if (this.saveMode == \"autodecide\") {\r\n                            console.log(\"waveform length: \" + clipInfo.waveform.length)\r\n                            if (clipInfo.waveform.length < this.minSaveLength) {\r\n                                console.log(\"skip saving the track since it is so short\");\r\n                                return;\r\n                            }\r\n\r\n                            // also skip if it has very little CONTENT as a percentage. especially for very short lcips.\r\n                        }\r\n                        if (this.saveMode == \"skipNext\") {\r\n                            // only skip one\r\n                            this.saveMode = \"autodecide\";\r\n                            console.log(\"skip saving because we are in skipNext save mode\");\r\n                            return;\r\n                        }\r\n                        if (this.saveMode == \"saveNext\") {\r\n                            // only save one\r\n                            this.saveMode = \"autodecide\";\r\n                            console.log(\"force saving because we are in saveNext save mode\");\r\n                        }\r\n\r\n                        this.saveClip(clipInfo);\r\n                    }\r\n\r\n                    // actually lets go straight to armed. default is to go to \"ready\"\r\n                    console.log(\"armed and ready!\")\r\n                    this.setState({ status: \"armed\" });\r\n\r\n                }).catch(function (err) {\r\n                    console.error('The following getUserMedia error occured: ' + err);\r\n                });\r\n        }\r\n        else {\r\n            console.error('getUserMedia not supported on your browser!');\r\n        }\r\n\r\n        this.state = { status: \"initializing\", clips: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.stream) { this.stream.stop(); }\r\n    }\r\n\r\n    private saveClip = (clipInfo: IClipInfo) => {\r\n        clipInfo.trackName = \"Track \" + this.trackCount;\r\n        clipInfo.trackNumber = this.trackCount;\r\n        this.trackCount++;\r\n        this.setState({ clips: [...this.state.clips, clipInfo], lastClip: undefined });\r\n        this.lastClip = undefined;\r\n        this.waveform = [];\r\n    }\r\n\r\n    public record = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.start();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n\r\n    public pause = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.pause();\r\n        this.setState({ status: \"paused\" });\r\n    }\r\n\r\n    public resume = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.resume();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n\r\n    public split = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.stop();\r\n        this.setState({ status: \"armed\" }); // not sure this is right!\r\n    }\r\n\r\n    public stop = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        if (this.mediaRecorder.state == \"recording\" || this.mediaRecorder.state == \"paused\") {\r\n            this.mediaRecorder.stop();\r\n        }\r\n\r\n        this.setState({ status: \"ready\" });\r\n    }\r\n\r\n    render() {\r\n        const { status, clips, lastClip } = this.state;\r\n        return (\r\n            <BaseScreen title={\"Recording \" + (this.props.title || \"\")} screen=\"record\" onScreenChange={this.props.onScreenChange}>\r\n                <div style={{ overflow: \"auto\", flex: \"auto\", margin: \"25px 10px\" }}>\r\n                    {clips.map((clip, i) => {\r\n                        return <ClipInfo key={i} clipInfo={clip} onDelete={() => {\r\n                            var removed = clips.splice(i, 1);\r\n                            this.setState({ clips: clips.slice() })\r\n                        }} />\r\n                    })}\r\n                </div>\r\n                <PaddedBar>\r\n                    <canvas className=\"visualizer\" height=\"100\" width=\"1000\" style={{ width: \"100%\" }} />\r\n                </PaddedBar>\r\n                <ButtonBar>\r\n                    {(status != \"recording\" && lastClip) && <button onClick={() => { this.saveClip(lastClip); }}>Save</button>}\r\n                    {(status == \"recording\") && <button onClick={() => { this.saveMode = \"saveNext\"; this.split() }}>Save</button>}\r\n\r\n                    {status == \"ready\" &&\r\n                        <RecordButton\r\n                            onClick={() => { this.setState({ status: \"armed\" }) }}\r\n                            title=\"Arm for recording\"\r\n                        />\r\n                    }\r\n\r\n                    {(status == \"recording\" || status == \"armed\") &&\r\n                        <StopButton\r\n                            onClick={this.stop}\r\n                            title=\"Stop\"\r\n                        />\r\n                    }\r\n\r\n                    {(status != \"recording\" && lastClip) && <button onClick={() => { this.setState({ lastClip: undefined }) }}>Skip</button>}\r\n                    {(status == \"recording\") && <button onClick={() => { this.saveMode = \"skipNext\"; this.split() }}>Skip</button>}\r\n                </ButtonBar>\r\n                <PaddedBar>{status}</PaddedBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { RecordButton } from '../buttons/recordButton';\r\nimport { ButtonBar } from '../layout/buttonBar';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar } from '../layout/titleBar';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\nimport { BaseScreen, IScreenProps } from './baseScreen';\r\n\r\nexport interface IStartScreenProps extends IScreenProps {\r\n    onSessionNameChange: (name: string) => void;\r\n}\r\n\r\nexport class StartScreen extends Component<IStartScreenProps> {\r\n    render() {\r\n        return (\r\n            <BaseScreen title={this.props.title} screen={this.props.screen} onScreenChange={this.props.onScreenChange}>\r\n                <PaddedBar>\r\n                    <input\r\n                        onChange={e => {\r\n                            this.props.onSessionNameChange(e.target.value);\r\n                        }}\r\n                        type=\"textfield\"\r\n                        style={{\r\n                            height: \"50px\",\r\n                            flex: \"auto\",\r\n                            fontSize: \"200%\",\r\n                            padding: \"5px\",\r\n                            textAlign: \"center\"\r\n                        }}\r\n                    />\r\n                </PaddedBar>\r\n                <ButtonBar>\r\n                    <RecordButton\r\n                        onClick={()=>{this.props.onScreenChange(\"record\")}}\r\n                        title=\"Start a new session\"\r\n                    />\r\n                </ButtonBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ScreenWrapper } from '../layout/screenWrapper';\r\nimport { TitleBar } from '../layout/titleBar';\r\nimport { IScreenProps, BaseScreen } from './baseScreen';\r\nimport { PaddedBar } from '../layout/paddedBar';\r\n\r\nexport interface IListScreenProps extends IScreenProps {\r\n}\r\n\r\nexport class ListenScreen extends Component<IListScreenProps> {\r\n    render() {\r\n        return (\r\n            <BaseScreen title={this.props.title} screen={this.props.screen} onScreenChange={this.props.onScreenChange}>\r\n                <PaddedBar>Listening!</PaddedBar>\r\n            </BaseScreen>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Recorder } from './recorder';\nimport { StartScreen } from './components/screens/startScreen';\nimport { ListenScreen } from './components/screens/listenScreen';\nimport { CurrentScreen } from './components/screens/baseScreen';\n\n// App has 3 states. Start, Record and Listen\nexport type Screen = \"start\" | \"record\" | \"listen\";\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n  currentScreen: Screen;\n  sessionName?: string;\n}\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = { currentScreen: \"start\" };\n  }\n\n  private setScreen = (currentScreen: CurrentScreen) => {\n    this.setState({ currentScreen });\n  }\n\n  render() {\n    const { currentScreen } = this.state;\n    switch (currentScreen) {\n      case \"record\":\n        // current functionality is in <Recorder>\n        return <Recorder\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n          title={this.state.sessionName}\n        />;\n      case \"listen\":\n        return <ListenScreen\n          title={this.state.sessionName}\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n        />\n      case \"start\":\n      default:\n        return <StartScreen\n          title={this.state.sessionName}\n          screen={this.state.currentScreen}\n          onScreenChange={this.setScreen}\n          onSessionNameChange={sessionName => { this.setState({ sessionName }) }}\n        />\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}