{"version":3,"sources":["getusermedia.js","visualizer.tsx","clipInfo.tsx","recorder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["promisifiedOldGUM","constraints","successCallback","errorCallback","getUserMedia","navigator","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Promise","call","reject","Error","polyfillGUM","undefined","mediaDevices","Visualizer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","clipCanvas","inherits","createClass","key","value","canvasCtx","getContext","WIDTH","width","HEIGHT","height","fillStyle","fillRect","lineWidth","strokeStyle","sliceWidth","props","waveform","x","lastX","lastY","beginPath","moveTo","i","y","lineTo","stroke","_this2","react_default","a","createElement","ref","c","setState","style","flex","Component","ClipInfo","clipInfo","display","flexDirection","margin","alignItems","trackNumber","maxWidth","minWidth","visualizer_Visualizer","controls","marginTop","src","audioUrl","justifyContent","name","onClick","onDelete","Recorder","mediaRecorder","maxSilence","minSaveLength","lastClip","download","saveMode","lastNoiseCounter","chunks","trackCount","saveClip","clips","toConsumableArray","state","link","document","href","body","appendChild","click","record","start","status","pause","resume","split","stop","console","log","audio","then","stream","audioContext","AudioContext","audioSource","createMediaStreamSource","analyser","createAnalyser","connect","bufferLength","fftSize","dataArray","Uint8Array","canvas","querySelector","draw","requestAnimationFrame","getByteTimeDomainData","min","max","forEach","v","Math","slice","MediaRecorder","mimeType","audioBitsPerSecond","onstart","e","ondataavailable","push","data","onstop","blob","Blob","type","window","URL","createObjectURL","catch","err","error","_this$state","fontSize","overflow","map","clip","clipInfo_ClipInfo","splice","textAlign","className","title","borderRadius","backgroundColor","border","cursor","marginBottom","defaultValue","onChange","target","placeholder","checked","App","recorder_Recorder","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f59305.chunk.js","sourcesContent":["export var promisifiedOldGUM = function (constraints, successCallback, errorCallback) {\r\n    // First get ahold of getUserMedia, if present\r\n    var getUserMedia = (navigator.getUserMedia ||\r\n        navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia ||\r\n        navigator.msGetUserMedia);\r\n\r\n    // Some browsers just don't implement it - return a rejected promise with an error\r\n    // to keep a consistent interface\r\n    if (!getUserMedia) {\r\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\r\n    }\r\n\r\n    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n    return new Promise(function (successCallback, errorCallback) {\r\n        getUserMedia.call(navigator, constraints, successCallback, errorCallback);\r\n    });\r\n\r\n}\r\n\r\nexport var polyfillGUM = function () {\r\n    // Older browsers might not implement mediaDevices at all, so we set an empty object first\r\n    if (navigator.mediaDevices === undefined) {\r\n        navigator.mediaDevices = {};\r\n    }\r\n\r\n    // Some browsers partially implement mediaDevices. We can't just assign an object\r\n    // with getUserMedia as it would overwrite existing properties.\r\n    // Here, we will just add the getUserMedia property if it's missing.\r\n    if (navigator.mediaDevices.getUserMedia === undefined) {\r\n        navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport interface IVisualizerProps {\r\n    waveform: number[];\r\n}\r\n\r\nexport interface IVisualizerState {\r\n    clipCanvas?: HTMLCanvasElement;\r\n}\r\n\r\nexport class Visualizer extends Component<IVisualizerProps, IVisualizerState> {\r\n    clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    componentDidUpdate() {\r\n        if (!this.clipCanvas) { return; }\r\n        var canvasCtx = this.clipCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        var WIDTH = this.clipCanvas.width\r\n        var HEIGHT = this.clipCanvas.height;\r\n\r\n        canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n        canvasCtx.lineWidth = 2;\r\n        canvasCtx.strokeStyle = 'rgb(225, 225, 225)';\r\n\r\n\r\n        var sliceWidth = WIDTH * 1.0 / this.props.waveform.length;\r\n        var x = 0;\r\n\r\n        var lastX = 0;\r\n        var lastY = HEIGHT / 2;\r\n        canvasCtx.beginPath();\r\n        canvasCtx.moveTo(lastX, lastY);\r\n\r\n        for (var i = 0; i < this.props.waveform.length; i++) {\r\n            var v = this.props.waveform[i] / 128.0;\r\n            var y = v * HEIGHT / 2;\r\n\r\n            if (this.props.waveform[i] > 140 || this.props.waveform[i] < 100) {\r\n                //canvasCtx.strokeStyle = 'rgb(255, 0, 0)';\r\n            }\r\n            else {\r\n                //canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\r\n            }\r\n\r\n            canvasCtx.lineTo(x, y);\r\n\r\n            lastX = x;\r\n            lastY = y;\r\n\r\n            x += sliceWidth;\r\n        }\r\n\r\n        canvasCtx.stroke();\r\n    }\r\n\r\n    render() {\r\n        return <canvas height=\"50\" width=\"1000\" ref={c => { if(!this.clipCanvas && c){\r\n            this.clipCanvas = c;\r\n            this.setState({clipCanvas: c});\r\n        } }} style={{ flex: \"auto\" }} />;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Visualizer } from './visualizer';\r\n\r\nexport interface IClipInfo {\r\n    audioUrl: string;\r\n    name: string;\r\n\r\n    //todo: add other information like length, date and wave preview\r\n    waveform: number[];\r\n    trackNumber: number;\r\n}\r\n\r\nexport interface IClipInfoProps {\r\n    clipInfo: IClipInfo;\r\n    onDelete: ()=>void;\r\n}\r\n\r\nexport class ClipInfo extends Component<IClipInfoProps> {\r\n    clipCanvas: HTMLCanvasElement | null = null;\r\n\r\n    render() {\r\n        const { clipInfo } = this.props;\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", height: \"100px\", margin: \"5px\" }}>\r\n                <div style={{ flex: \"none\", display: \"flex\", alignItems: \"center\", margin: \"5px\" }}>{clipInfo.trackNumber}</div>\r\n                <div style={{ flex: \"auto\", display: \"flex\", flexDirection: \"column\", maxWidth:\"80%\", minWidth: \"50%\" }}>\r\n                    <Visualizer waveform={clipInfo.waveform} />\r\n                    <audio controls style={{width: \"100%\", height: \"40px\", marginTop:\"10px\"}} src={clipInfo.audioUrl} />\r\n                </div>\r\n                <div style={{ margin:\"5px\", justifyContent:\"space-around\", flex: \"none\", display: \"flex\", flexDirection: \"column\" }}>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        {clipInfo.name}\r\n                    </div>\r\n                    <div style={{ flex: \"none\" }}>\r\n                        <button onClick={this.props.onDelete}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { polyfillGUM } from \"./getusermedia\";\r\nimport React, { Component } from 'react';\r\nimport { ClipInfo, IClipInfo } from \"./clipInfo\";\r\n\r\nexport interface IRecorderProps {\r\n\r\n}\r\n\r\nexport interface IRecorderState {\r\n    lastClip?: IClipInfo;\r\n    clips: IClipInfo[];\r\n    status: \"initializing\" | \"ready\" | \"armed\" | \"recording\" | \"done\" | \"paused\"; // it looks like mediarecorder is reusable after stopping.\r\n    recording?: \"waiting for audio\" | \"detected sound recently\" | \"recording a track\";\r\n}\r\n\r\n\r\nexport class Recorder extends Component<IRecorderProps, IRecorderState> {\r\n    private mediaRecorder?: MediaRecorder;\r\n\r\n    private readonly maxSilence = 100;\r\n    private readonly minSaveLength = 1000;\r\n    private lastClip?: IClipInfo;\r\n    private name?: string;\r\n    private download = false;\r\n    private saveMode: \"saveNext\" | \"autodecide\"| \"skipNext\" = \"autodecide\";\r\n    private lastNoiseCounter = 0;\r\n\r\n    // currently recording chunks\r\n    private chunks: Blob[] = [];\r\n\r\n    // currently recording chunks\r\n    private waveform: number[] = [];\r\n\r\n    private trackCount = 1;\r\n\r\n    constructor(props: IRecorderProps) {\r\n        super(props);\r\n        polyfillGUM();\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            console.log('getUserMedia supported.');\r\n            navigator.mediaDevices.getUserMedia({ audio: true })\r\n                .then(stream => {\r\n                    var audioContext = new AudioContext();\r\n\r\n                    var audioSource = audioContext.createMediaStreamSource(stream);\r\n                    var analyser = audioContext.createAnalyser();\r\n                    audioSource.connect(analyser);\r\n                    var bufferLength = analyser.fftSize;\r\n                    console.log(bufferLength);\r\n                    var dataArray = new Uint8Array(bufferLength);\r\n\r\n                    var canvas = document.querySelector('.visualizer') as HTMLCanvasElement;\r\n                    var canvasCtx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n                    // TODO: move this to a method\r\n                    var draw = () => {\r\n                        var WIDTH = canvas.width\r\n                        var HEIGHT = canvas.height;\r\n\r\n                        requestAnimationFrame(draw);\r\n\r\n                        analyser.getByteTimeDomainData(dataArray);\r\n\r\n\r\n                        var min = 100000000000000;\r\n                        var max = -100000000000000;\r\n                        dataArray.forEach(v => { min = Math.min(v, min); max = Math.max(v, max); });\r\n\r\n                        this.waveform = this.waveform.concat([min, max]);\r\n\r\n\r\n                        if (this.state.status != \"recording\") {\r\n                            // there are some... race conditions here depending on when the recording gets stopped.\r\n                            // should either fix this or ensure we don't trim VALID recordings\r\n                            // it should never be able to get out of this region, but bad things would happen if it did?\r\n                            if (this.waveform.length > this.maxSilence && this.waveform.length < this.minSaveLength) \r\n                            {\r\n                                this.waveform = this.waveform.slice(this.waveform.length - this.maxSilence);\r\n                            }\r\n                        }\r\n\r\n                        if (max > 140 || min < 100) {\r\n                            this.lastNoiseCounter = 0;\r\n                            // if we aren't recording we should start!\r\n                            if (this.state.status == \"armed\") {\r\n                                this.record();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.lastNoiseCounter++;\r\n                            if (this.lastNoiseCounter > this.maxSilence) {\r\n                                // if we are recording we should stop by stay armed.\r\n                                if (this.state.status == \"recording\") {\r\n                                    this.split();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        canvasCtx.fillStyle = 'rgb(25, 25, 25)';\r\n                        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n\r\n                        canvasCtx.lineWidth = 2;\r\n                        canvasCtx.strokeStyle = 'rgb(255, 255, 255)';\r\n                        //canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\r\n\r\n\r\n                        var sliceWidth = WIDTH * 1.0 / this.waveform.length;\r\n                        var x = 0;\r\n\r\n                        var lastX = 0;\r\n                        var lastY = HEIGHT / 2;\r\n                        canvasCtx.beginPath();\r\n                        canvasCtx.moveTo(lastX, lastY);\r\n\r\n                        for (var i = 0; i < this.waveform.length; i++) {\r\n                            var v = this.waveform[i] / 128.0;\r\n                            var y = v * HEIGHT / 2;\r\n\r\n                            if (this.waveform[i] > 140 || this.waveform[i] < 100) {\r\n                                //canvasCtx.strokeStyle = 'rgb(255, 0, 0)';\r\n\r\n                            }\r\n                            else {\r\n                                //canvasCtx.strokeStyle = 'rgb(255, 255, 255)';\r\n                            }\r\n\r\n                            //canvasCtx.beginPath();\r\n                            //canvasCtx.moveTo(lastX, lastY);\r\n                            canvasCtx.lineTo(x, y);\r\n                            //canvasCtx.stroke();\r\n\r\n                            lastX = x;\r\n                            lastY = y;\r\n\r\n                            x += sliceWidth;\r\n                        }\r\n\r\n                        canvasCtx.lineTo(canvas.width, canvas.height / 2);\r\n                        canvasCtx.stroke();\r\n\r\n                    }\r\n\r\n                    draw();\r\n\r\n                    this.mediaRecorder = new MediaRecorder(stream, { mimeType: \"audio/webm\", audioBitsPerSecond: 320000 });\r\n                    this.mediaRecorder.onstart = e => {\r\n                        // reset our waveform and chunks\r\n                        this.chunks = [];\r\n                        this.waveform = [];\r\n                    }\r\n                    this.mediaRecorder.ondataavailable = (e) => {\r\n                        this.chunks.push(e.data);\r\n                    }\r\n                    this.mediaRecorder.onstop = (e) => {\r\n                        const blob = new Blob(this.chunks, { 'type': 'audio/webm' });\r\n                        this.chunks = [];\r\n                        const audioUrl = window.URL.createObjectURL(blob);\r\n                        const clipInfo: IClipInfo = {\r\n                            audioUrl,\r\n                            name: \"Track \" + this.trackCount,\r\n                            waveform: this.waveform,\r\n                            trackNumber: this.trackCount,\r\n                        };\r\n\r\n                        // TODO: we should have a way to MANUALLY SAVE and MANUALLY SKIP\r\n                        // eg stop/save or trash can button\r\n\r\n                        // this is where we should decide if we keep it or not...\r\n                        // if it is really short DONT keep it.\r\n\r\n                        this.lastClip = clipInfo;\r\n                        this.setState({lastClip: clipInfo});\r\n                        if(this.saveMode == \"autodecide\"){\r\n                            console.log(\"waveform length: \" + clipInfo.waveform.length)\r\n                            if(clipInfo.waveform.length < this.minSaveLength){\r\n                                console.log(\"skip saving the track since it is so short\");\r\n                                return;\r\n                            }\r\n    \r\n                            // also skip if it has very little CONTENT as a percentage. especially for very short lcips.\r\n                        }\r\n                        if(this.saveMode == \"skipNext\"){\r\n                            // only skip one\r\n                            this.saveMode = \"autodecide\";\r\n                            console.log(\"skip saving because we are in skipNext save mode\");\r\n                            return;\r\n                        }\r\n                        if(this.saveMode == \"saveNext\"){\r\n                            // only save one\r\n                            this.saveMode = \"autodecide\";\r\n                            console.log(\"force saving because we are in saveNext save mode\");\r\n                        }\r\n\r\n                        this.saveClip(clipInfo);\r\n                    }\r\n                    this.setState({ status: \"ready\" });\r\n                }).catch(function (err) {\r\n                    console.error('The following getUserMedia error occured: ' + err);\r\n                }\r\n                );\r\n        }\r\n        else {\r\n            console.error('getUserMedia not supported on your browser!');\r\n        }\r\n\r\n        this.state = { status: \"initializing\", clips: [] };\r\n    }\r\n\r\n    private saveClip = (clipInfo: IClipInfo) => {\r\n        this.trackCount++;\r\n        this.setState({ clips: [...this.state.clips, clipInfo], lastClip: undefined });\r\n        this.lastClip = undefined;\r\n        this.waveform = [];\r\n\r\n        var link = document.createElement(\"a\"); // Or maybe get it from the current document\r\n        link.href = clipInfo.audioUrl;\r\n        link.download = (this.name ? this.name + \"_\" : \"\") + name + \".webm\";\r\n        document.body.appendChild(link);\r\n        this.download && link.click();\r\n    }\r\n\r\n    public record = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.start();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n\r\n    public pause = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.pause();\r\n        this.setState({ status: \"paused\" });\r\n    }\r\n\r\n    public resume = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.resume();\r\n        this.setState({ status: \"recording\" });\r\n    }\r\n\r\n    public split = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        this.mediaRecorder.stop();\r\n        this.setState({ status: \"armed\" }); // not sure this is right!\r\n    }\r\n\r\n    public stop = () => {\r\n        if (!this.mediaRecorder) {\r\n            throw \"No recorder!\";\r\n        }\r\n\r\n        if(this.mediaRecorder.state == \"recording\" || this.mediaRecorder.state == \"paused\"){\r\n            this.mediaRecorder.stop();\r\n        }\r\n\r\n        this.setState({ status: \"ready\" });\r\n    }\r\n\r\n    render() {\r\n        const { status, clips, lastClip } = this.state;\r\n        return <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\", justifyContent: \"flex-end\" }}>\r\n            <div style={{justifyContent: \"center\", alignItems: \"center\", margin: \"10px\", display:\"flex\", fontSize: \"125%\"}}> { (status == \"recording\" || status == \"armed\") && \"Recording\" } {this.name}</div>\r\n            <div style={{ overflow: \"auto\", flex: \"auto\", margin: \"25px 10px\" }}>\r\n                {clips.map((clip, i) => {\r\n                    return <ClipInfo key={i} clipInfo={clip} onDelete={()=>{\r\n                        var removed = clips.splice(i, 1);\r\n                        this.setState({clips: clips.slice() })}} />\r\n                })}\r\n            </div>\r\n            <div style={{ flex: \"none\", textAlign: \"center\", justifyContent: \"center\" }}>\r\n                <canvas className=\"visualizer\" height=\"100\" width=\"1000\" style={{ width: \"100%\" }} />\r\n            </div>\r\n            <div style={{ flex: \"none\", textAlign: \"center\", justifyContent: \"center\" }}>\r\n                {status}\r\n            </div>\r\n            <div style={{ flex: \"none\", display: \"flex\", flexDirection: \"row\", textAlign: \"center\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                {status == \"ready\" &&\r\n                    <button onClick={() => { this.setState({ status: \"armed\" })}} title=\"Arm for recording\" style={{height: \"50px\", width: \"50px\", borderRadius: \"100px\", backgroundColor: \"rgb(225,0,0)\", border: \"none\", margin: \"10px\", cursor: \"pointer\"}}/>}\r\n                {(status == \"recording\" ) && <button onClick={()=>{ this.saveMode = \"saveNext\"; this.split()}}>Save</button>}\r\n                {(status == \"recording\" || status == \"armed\") && <button onClick={this.stop} title=\"Stop\" style={{height: \"50px\", width: \"50px\", border: \"none\", backgroundColor:\"grey\", cursor: \"pointer\", margin: \"10px\"}}/>}\r\n                {(status == \"recording\") && <button onClick={()=>{ this.saveMode = \"skipNext\"; this.split()}}>Skip</button>}\r\n            </div>\r\n            <div style={{ marginBottom: \"50px\", flex: \"none\", display: \"flex\", flexDirection: \"row\", textAlign: \"center\", justifyContent: \"center\" }}>\r\n                {(status == \"recording\" || status == \"armed\") ? <div>{this.name}</div> : <input type=\"textarea\" defaultValue={this.name} onChange={e => { this.name = e.target.value; }} placeholder={\"Name your session\"} />}\r\n                <input type=\"checkbox\" onChange={e => { this.download = e.target.checked; }} /> Save\r\n                {(status!=\"recording\" && lastClip) && <button onClick={()=>{ this.saveClip(lastClip); }}>Save Last</button>}\r\n            </div>\r\n        </div>;\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Recorder } from './recorder';\n\nclass App extends Component {\n  render() {\n    return (\n        <Recorder />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}